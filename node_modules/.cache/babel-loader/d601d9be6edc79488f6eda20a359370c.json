{"ast":null,"code":"/**\n * Autobind is a utility for binding methods in a class. This simplifies tagging methods as being \"bound\" to the this pointer\n * so that they can be used in scenarios that simply require a function callback.\n * @deprecated This has been deprecated in favor of using arrow function properties\n */\nexport function autobind( // tslint:disable-next-line:no-any\ntarget, key, descriptor) {\n  var fn = descriptor.value;\n  var defining = false;\n  return {\n    configurable: true,\n    get: function () {\n      if (defining || fn && this === fn.prototype || this.hasOwnProperty(key)) {\n        return fn;\n      } // Bind method only once, and update the property to return the bound value from now on\n\n\n      var fnBound = fn && fn.bind(this);\n      defining = true;\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        enumerable: true,\n        value: fnBound\n      });\n      defining = false;\n      return fnBound;\n    },\n    // tslint:disable-next-line:no-any\n    set: function (newValue) {\n      Object.defineProperty(this, key, {\n        configurable: true,\n        writable: true,\n        enumerable: true,\n        value: newValue\n      });\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}