export const AnimationClassNames: {
  fadeIn100: any;
  fadeIn200: any;
  fadeIn400: any;
  fadeIn500: any;
  fadeOut100: any;
  fadeOut200: any;
  fadeOut400: any;
  fadeOut500: any;
  rotate90deg: any;
  rotateN90deg: any;
  scaleDownIn100: any;
  scaleDownOut98: any;
  scaleUpIn100: any;
  scaleUpOut103: any;
  slideDownIn10: any;
  slideDownIn20: any;
  slideDownOut10: any;
  slideDownOut20: any;
  slideLeftIn10: any;
  slideLeftIn20: any;
  slideLeftIn40: any;
  slideLeftIn400: any;
  slideLeftOut10: any;
  slideLeftOut20: any;
  slideLeftOut40: any;
  slideLeftOut400: any;
  slideRightIn10: any;
  slideRightIn20: any;
  slideRightIn40: any;
  slideRightIn400: any;
  slideRightOut10: any;
  slideRightOut20: any;
  slideRightOut40: any;
  slideRightOut400: any;
  slideUpIn10: any;
  slideUpIn20: any;
  slideUpOut10: any;
  slideUpOut20: any;
};
export const AnimationStyles: {
  fadeIn100: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeIn200: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeIn400: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeIn500: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeOut100: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeOut200: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeOut400: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  fadeOut500: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  rotate90deg: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  rotateN90deg: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  scaleDownIn100: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  scaleDownOut98: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  scaleUpIn100: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  scaleUpOut103: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideDownIn10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideDownIn20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideDownOut10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideDownOut20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftIn10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftIn20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftIn40: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftIn400: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftOut10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftOut20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftOut40: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideLeftOut400: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightIn10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightIn20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightIn40: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightIn400: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightOut10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightOut20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightOut40: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideRightOut400: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideUpIn10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideUpIn20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideUpOut10: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
  slideUpOut20: {
    animationDuration: string;
    animationFillMode: string;
    animationName: string;
    animationTimingFunction: string;
  };
};
export const AnimationVariables: {
  durationValue1: string;
  durationValue2: string;
  durationValue3: string;
  durationValue4: string;
  easeFunction1: string;
  easeFunction2: string;
};
export const ColorClassNames: {
  accent: any;
  accentBackground: any;
  accentBackgroundHover: any;
  accentBorder: any;
  accentBorderHover: any;
  accentHover: any;
  black: any;
  blackBackground: any;
  blackBackgroundHover: any;
  blackBorder: any;
  blackBorderHover: any;
  blackHover: any;
  blackTranslucent40: any;
  blackTranslucent40Background: any;
  blackTranslucent40BackgroundHover: any;
  blackTranslucent40Border: any;
  blackTranslucent40BorderHover: any;
  blackTranslucent40Hover: any;
  blue: any;
  blueBackground: any;
  blueBackgroundHover: any;
  blueBorder: any;
  blueBorderHover: any;
  blueDark: any;
  blueDarkBackground: any;
  blueDarkBackgroundHover: any;
  blueDarkBorder: any;
  blueDarkBorderHover: any;
  blueDarkHover: any;
  blueHover: any;
  blueLight: any;
  blueLightBackground: any;
  blueLightBackgroundHover: any;
  blueLightBorder: any;
  blueLightBorderHover: any;
  blueLightHover: any;
  blueMid: any;
  blueMidBackground: any;
  blueMidBackgroundHover: any;
  blueMidBorder: any;
  blueMidBorderHover: any;
  blueMidHover: any;
  green: any;
  greenBackground: any;
  greenBackgroundHover: any;
  greenBorder: any;
  greenBorderHover: any;
  greenDark: any;
  greenDarkBackground: any;
  greenDarkBackgroundHover: any;
  greenDarkBorder: any;
  greenDarkBorderHover: any;
  greenDarkHover: any;
  greenHover: any;
  greenLight: any;
  greenLightBackground: any;
  greenLightBackgroundHover: any;
  greenLightBorder: any;
  greenLightBorderHover: any;
  greenLightHover: any;
  magenta: any;
  magentaBackground: any;
  magentaBackgroundHover: any;
  magentaBorder: any;
  magentaBorderHover: any;
  magentaDark: any;
  magentaDarkBackground: any;
  magentaDarkBackgroundHover: any;
  magentaDarkBorder: any;
  magentaDarkBorderHover: any;
  magentaDarkHover: any;
  magentaHover: any;
  magentaLight: any;
  magentaLightBackground: any;
  magentaLightBackgroundHover: any;
  magentaLightBorder: any;
  magentaLightBorderHover: any;
  magentaLightHover: any;
  neutralDark: any;
  neutralDarkBackground: any;
  neutralDarkBackgroundHover: any;
  neutralDarkBorder: any;
  neutralDarkBorderHover: any;
  neutralDarkHover: any;
  neutralLight: any;
  neutralLightBackground: any;
  neutralLightBackgroundHover: any;
  neutralLightBorder: any;
  neutralLightBorderHover: any;
  neutralLightHover: any;
  neutralLighter: any;
  neutralLighterAlt: any;
  neutralLighterAltBackground: any;
  neutralLighterAltBackgroundHover: any;
  neutralLighterAltBorder: any;
  neutralLighterAltBorderHover: any;
  neutralLighterAltHover: any;
  neutralLighterBackground: any;
  neutralLighterBackgroundHover: any;
  neutralLighterBorder: any;
  neutralLighterBorderHover: any;
  neutralLighterHover: any;
  neutralPrimary: any;
  neutralPrimaryAlt: any;
  neutralPrimaryAltBackground: any;
  neutralPrimaryAltBackgroundHover: any;
  neutralPrimaryAltBorder: any;
  neutralPrimaryAltBorderHover: any;
  neutralPrimaryAltHover: any;
  neutralPrimaryBackground: any;
  neutralPrimaryBackgroundHover: any;
  neutralPrimaryBorder: any;
  neutralPrimaryBorderHover: any;
  neutralPrimaryHover: any;
  neutralQuaternary: any;
  neutralQuaternaryAlt: any;
  neutralQuaternaryAltBackground: any;
  neutralQuaternaryAltBackgroundHover: any;
  neutralQuaternaryAltBorder: any;
  neutralQuaternaryAltBorderHover: any;
  neutralQuaternaryAltHover: any;
  neutralQuaternaryBackground: any;
  neutralQuaternaryBackgroundHover: any;
  neutralQuaternaryBorder: any;
  neutralQuaternaryBorderHover: any;
  neutralQuaternaryHover: any;
  neutralSecondary: any;
  neutralSecondaryAlt: any;
  neutralSecondaryAltBackground: any;
  neutralSecondaryAltBackgroundHover: any;
  neutralSecondaryAltBorder: any;
  neutralSecondaryAltBorderHover: any;
  neutralSecondaryAltHover: any;
  neutralSecondaryBackground: any;
  neutralSecondaryBackgroundHover: any;
  neutralSecondaryBorder: any;
  neutralSecondaryBorderHover: any;
  neutralSecondaryHover: any;
  neutralTertiary: any;
  neutralTertiaryAlt: any;
  neutralTertiaryAltBackground: any;
  neutralTertiaryAltBackgroundHover: any;
  neutralTertiaryAltBorder: any;
  neutralTertiaryAltBorderHover: any;
  neutralTertiaryAltHover: any;
  neutralTertiaryBackground: any;
  neutralTertiaryBackgroundHover: any;
  neutralTertiaryBorder: any;
  neutralTertiaryBorderHover: any;
  neutralTertiaryHover: any;
  orange: any;
  orangeBackground: any;
  orangeBackgroundHover: any;
  orangeBorder: any;
  orangeBorderHover: any;
  orangeHover: any;
  orangeLight: any;
  orangeLightBackground: any;
  orangeLightBackgroundHover: any;
  orangeLightBorder: any;
  orangeLightBorderHover: any;
  orangeLightHover: any;
  orangeLighter: any;
  orangeLighterBackground: any;
  orangeLighterBackgroundHover: any;
  orangeLighterBorder: any;
  orangeLighterBorderHover: any;
  orangeLighterHover: any;
  purple: any;
  purpleBackground: any;
  purpleBackgroundHover: any;
  purpleBorder: any;
  purpleBorderHover: any;
  purpleDark: any;
  purpleDarkBackground: any;
  purpleDarkBackgroundHover: any;
  purpleDarkBorder: any;
  purpleDarkBorderHover: any;
  purpleDarkHover: any;
  purpleHover: any;
  purpleLight: any;
  purpleLightBackground: any;
  purpleLightBackgroundHover: any;
  purpleLightBorder: any;
  purpleLightBorderHover: any;
  purpleLightHover: any;
  red: any;
  redBackground: any;
  redBackgroundHover: any;
  redBorder: any;
  redBorderHover: any;
  redDark: any;
  redDarkBackground: any;
  redDarkBackgroundHover: any;
  redDarkBorder: any;
  redDarkBorderHover: any;
  redDarkHover: any;
  redHover: any;
  teal: any;
  tealBackground: any;
  tealBackgroundHover: any;
  tealBorder: any;
  tealBorderHover: any;
  tealDark: any;
  tealDarkBackground: any;
  tealDarkBackgroundHover: any;
  tealDarkBorder: any;
  tealDarkBorderHover: any;
  tealDarkHover: any;
  tealHover: any;
  tealLight: any;
  tealLightBackground: any;
  tealLightBackgroundHover: any;
  tealLightBorder: any;
  tealLightBorderHover: any;
  tealLightHover: any;
  themeDark: any;
  themeDarkAlt: any;
  themeDarkAltBackground: any;
  themeDarkAltBackgroundHover: any;
  themeDarkAltBorder: any;
  themeDarkAltBorderHover: any;
  themeDarkAltHover: any;
  themeDarkBackground: any;
  themeDarkBackgroundHover: any;
  themeDarkBorder: any;
  themeDarkBorderHover: any;
  themeDarkHover: any;
  themeDarker: any;
  themeDarkerBackground: any;
  themeDarkerBackgroundHover: any;
  themeDarkerBorder: any;
  themeDarkerBorderHover: any;
  themeDarkerHover: any;
  themeLight: any;
  themeLightBackground: any;
  themeLightBackgroundHover: any;
  themeLightBorder: any;
  themeLightBorderHover: any;
  themeLightHover: any;
  themeLighter: any;
  themeLighterAlt: any;
  themeLighterAltBackground: any;
  themeLighterAltBackgroundHover: any;
  themeLighterAltBorder: any;
  themeLighterAltBorderHover: any;
  themeLighterAltHover: any;
  themeLighterBackground: any;
  themeLighterBackgroundHover: any;
  themeLighterBorder: any;
  themeLighterBorderHover: any;
  themeLighterHover: any;
  themePrimary: any;
  themePrimaryBackground: any;
  themePrimaryBackgroundHover: any;
  themePrimaryBorder: any;
  themePrimaryBorderHover: any;
  themePrimaryHover: any;
  themeSecondary: any;
  themeSecondaryBackground: any;
  themeSecondaryBackgroundHover: any;
  themeSecondaryBorder: any;
  themeSecondaryBorderHover: any;
  themeSecondaryHover: any;
  themeTertiary: any;
  themeTertiaryBackground: any;
  themeTertiaryBackgroundHover: any;
  themeTertiaryBorder: any;
  themeTertiaryBorderHover: any;
  themeTertiaryHover: any;
  white: any;
  whiteBackground: any;
  whiteBackgroundHover: any;
  whiteBorder: any;
  whiteBorderHover: any;
  whiteHover: any;
  whiteTranslucent40: any;
  whiteTranslucent40Background: any;
  whiteTranslucent40BackgroundHover: any;
  whiteTranslucent40Border: any;
  whiteTranslucent40BorderHover: any;
  whiteTranslucent40Hover: any;
  yellow: any;
  yellowBackground: any;
  yellowBackgroundHover: any;
  yellowBorder: any;
  yellowBorderHover: any;
  yellowDark: any;
  yellowDarkBackground: any;
  yellowDarkBackgroundHover: any;
  yellowDarkBorder: any;
  yellowDarkBorderHover: any;
  yellowDarkHover: any;
  yellowHover: any;
  yellowLight: any;
  yellowLightBackground: any;
  yellowLightBackgroundHover: any;
  yellowLightBorder: any;
  yellowLightBorderHover: any;
  yellowLightHover: any;
};
export const DefaultFontStyles: {
  large: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  medium: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  mediumPlus: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  mega: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  small: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  smallPlus: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  superLarge: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  tiny: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  xLarge: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  xSmall: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
  xxLarge: {
    MozOsxFontSmoothing: string;
    WebkitFontSmoothing: string;
    fontFamily: string;
    fontSize: string;
    fontWeight: number;
  };
};
export const DefaultPalette: {
  accent: string;
  black: string;
  blackTranslucent40: string;
  blue: string;
  blueDark: string;
  blueLight: string;
  blueMid: string;
  green: string;
  greenDark: string;
  greenLight: string;
  magenta: string;
  magentaDark: string;
  magentaLight: string;
  neutralDark: string;
  neutralLight: string;
  neutralLighter: string;
  neutralLighterAlt: string;
  neutralPrimary: string;
  neutralPrimaryAlt: string;
  neutralQuaternary: string;
  neutralQuaternaryAlt: string;
  neutralSecondary: string;
  neutralSecondaryAlt: string;
  neutralTertiary: string;
  neutralTertiaryAlt: string;
  orange: string;
  orangeLight: string;
  orangeLighter: string;
  purple: string;
  purpleDark: string;
  purpleLight: string;
  red: string;
  redDark: string;
  teal: string;
  tealDark: string;
  tealLight: string;
  themeDark: string;
  themeDarkAlt: string;
  themeDarker: string;
  themeLight: string;
  themeLighter: string;
  themeLighterAlt: string;
  themePrimary: string;
  themeSecondary: string;
  themeTertiary: string;
  white: string;
  whiteTranslucent40: string;
  yellow: string;
  yellowDark: string;
  yellowLight: string;
};
export const FontClassNames: {
  large: any;
  medium: any;
  mediumPlus: any;
  mega: any;
  small: any;
  smallPlus: any;
  superLarge: any;
  tiny: any;
  xLarge: any;
  xSmall: any;
  xxLarge: any;
};
export const FontSizes: {
  icon: string;
  large: string;
  medium: string;
  mediumPlus: string;
  mega: string;
  mini: string;
  small: string;
  smallPlus: string;
  superLarge: string;
  xLarge: string;
  xSmall: string;
  xxLarge: string;
};
export const FontWeights: {
  bold: number;
  light: number;
  regular: number;
  semibold: number;
  semilight: number;
};
export const HighContrastSelector: string;
export const HighContrastSelectorBlack: string;
export const HighContrastSelectorWhite: string;
export const IconFontSizes: {
  large: string;
  medium: string;
  small: string;
  xSmall: string;
};
export const InjectionMode: {
  appendChild: number;
  insertNode: number;
  none: number;
};
export namespace PulsingBeaconAnimationStyles {
  function continuousPulseAnimationDouble(beaconColorOne: any, beaconColorTwo: any, innerDimension: any, outerDimension: any, borderWidth: any): any;
  function continuousPulseAnimationSingle(beaconColorOne: any, beaconColorTwo: any, innerDimension: any, outerDimension: any, borderWidth: any): any;
  function createDefaultAnimation(animationName: any, delayLength: any): any;
}
export const ScreenWidthMaxLarge: number;
export const ScreenWidthMaxMedium: number;
export const ScreenWidthMaxSmall: number;
export const ScreenWidthMaxXLarge: number;
export const ScreenWidthMaxXXLarge: number;
export const ScreenWidthMinLarge: number;
export const ScreenWidthMinMedium: number;
export const ScreenWidthMinSmall: number;
export const ScreenWidthMinUhfMobile: number;
export const ScreenWidthMinXLarge: number;
export const ScreenWidthMinXXLarge: number;
export const ScreenWidthMinXXXLarge: number;
export class Stylesheet {
  static getInstance(): any;
  constructor(config: any);
  argsFromClassName(className: any): any;
  cacheClassName(className: any, key: any, args: any, rules: any): void;
  classNameFromKey(key: any): any;
  getClassName(displayName: any): any;
  getRules(includePreservedRules: any): any;
  insertRule(rule: any, preserve: any): void;
  insertedRulesFromClassName(className: any): any;
  onReset(callback: any): void;
  reset(): void;
  resetKeys(): void;
  setConfig(config: any): void;
}
export const ThemeSettingName: string;
export const ZIndexes: {
  Coachmark: number;
  FocusStyle: number;
  KeytipLayer: number;
  Layer: number;
  Nav: number;
  ScrollablePane: number;
};
export function buildClassMap(styles: any): any;
export function concatStyleSets(...args: any[]): any;
export function createFontStyles(localeCode: any): any;
export function createTheme(theme: any, depComments: any): any;
export function focusClear(): any;
export function fontFace(font: any): void;
export function getFadedOverflowStyle(theme: any, color: any, direction: any, width: any, height: any): any;
export function getFocusOutlineStyle(theme: any, inset: any, width: any, color: any): any;
export function getFocusStyle(theme: any, insetOrOptions: any, position: any, highContrastStyle: any, borderColor: any, outlineColor: any, isFocusedOnly: any): any;
export function getGlobalClassNames(classNames: any, theme: any, disableGlobalClassNames: any): any;
export function getIcon(name: any): any;
export function getIconClassName(name: any): any;
export function getScreenSelector(min: any, max: any): any;
export function getTheme(depComments: any): any;
export function getThemedContext(context: any, scheme: any, theme: any): any;
export const hiddenContentStyle: {
  border: number;
  height: number;
  margin: number;
  overflow: string;
  padding: number;
  position: string;
  width: number;
};
export function keyframes(timeline: any): any;
export function loadTheme(theme: any, depComments: any): any;
export function mergeStyleSets(...args: any[]): any;
export function mergeStyles(...args: any[]): any;
export const noWrap: {
  overflow: string;
  textOverflow: string;
  whiteSpace: string;
};
export const normalize: {
  boxShadow: string;
  boxSizing: string;
  margin: number;
  padding: number;
};
export function registerDefaultFontFaces(baseUrl: any): void;
export function registerIconAlias(iconName: any, mappedToName: any): void;
export function registerIcons(iconSubset: any, options: any): void;
export function registerOnThemeChangeCallback(callback: any): void;
export function removeOnThemeChangeCallback(callback: any): void;
export function setIconOptions(options: any): void;
export function unregisterIcons(iconNames: any): void;
